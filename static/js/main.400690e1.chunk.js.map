{"version":3,"sources":["components/ContactList/styles.module.scss","components/Form/styles.module.scss","redux/contacts/contacts-action.js","redux/contacts/contacts-reducer.js","redux/store.js","components/Form/Form.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","App.js","index.js","components/Filter/styles.module.scss"],"names":["module","exports","addContact","createAction","name","number","payload","id","shortid","generate","deleteContact","changeFilter","contact","createReducer","actions","state","action","filter","_","combineReducers","middleware","getDefaultMiddleware","logger","store","configureStore","reducer","contacts","contactsReducer","devTools","process","Form","handleInputChange","event","currentTarget","value","setState","handleSubmit","preventDefault","props","onSubmit","reset","className","styles","title","this","form","label","text","input","type","onChange","pattern","required","button","content","Component","connect","dispatch","contactsActions","onDeleteContact","list","map","item","onClick","allContacts","normilizeFilter","toLowerCase","includes","getVisibleContact","e","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.400690e1.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"styles_list__xjOlh\",\"item\":\"styles_item__wRJt2\",\"button\":\"styles_button__AJHCf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"styles_title__1YmCD\",\"form\":\"styles_form__3BTQv\",\"label\":\"styles_label__1Ku7G\",\"input\":\"styles_input__2RtgK\",\"text\":\"styles_text__2Muy-\",\"button\":\"styles_button__3_r4I\"};","import { createAction } from '@reduxjs/toolkit';\nimport shortid from 'shortid';\n\nconst addContact = createAction('contacts/Add', ({ name, number }) => ({\n  payload: {\n    id: shortid.generate(),\n    name,\n    number,\n  },\n}));\n\nconst deleteContact = createAction('contacts/Delete');\nconst changeFilter = createAction('contacts/ChangeFilter');\n\nexport default { addContact, deleteContact, changeFilter };\n","import { combineReducers } from 'redux';\nimport { createReducer } from '@reduxjs/toolkit';\nimport actions from './contacts-action';\n\nconst contact = createReducer([], {\n  [actions.addContact]: (state, action) => [...state, action.payload],\n  [actions.deleteContact]: (state, action) =>\n    state.filter(({ id }) => id !== action.payload),\n});\n\nconst filter = createReducer('', {\n  [actions.changeFilter]: (_, action) => action.payload,\n});\n\nexport default combineReducers({\n  contact,\n  filter,\n});\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\nimport logger from 'redux-logger';\nimport contactsReducer from './contacts/contacts-reducer';\n\nconst middleware = [...getDefaultMiddleware(), logger];\n\nconst store = configureStore({\n  reducer: {\n    contacts: contactsReducer,\n  },\n  middleware,\n  devTools: process.env.NODE_ENV === 'development',\n});\n\nexport default store;\n","import { Component } from \"react\";\nimport { connect} from 'react-redux';\nimport contactsActions from '../../redux/contacts/contacts-action'\nimport styles from '../Form/styles.module.scss';\n\n\nclass Form extends Component{\n\n    state = {\n        name: '',\n        number: '',\n    }\n    handleInputChange = (event) => {\n        const { name, value } = event.currentTarget;\n        this.setState({\n          [name]: value,\n        });\n      };\n   \n\n      handleSubmit = (event) => {\n        event.preventDefault();\n\n        this.props.onSubmit(this.state );\n        this.reset();\n      };\n\n      reset = () => {\n          this.setState({'name' : '', 'number' : ''})\n      }\n\n    render(){\n        return(<>\n        \n            <h1 className={styles.title}>Phone book</h1>\n            <form onSubmit={this.handleSubmit} className={styles.form}>\n              <label className={styles.label}>\n                <span className={styles.text}>Name</span>\n                <input className={styles.input}\n                  type='text'\n                  name='name'\n                  value={this.state.name}\n                  onChange={this.handleInputChange}\n                  pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                  title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n                  required\n                />\n              </label>\n              <label className={styles.label}>\n                <span className={styles.text}>Phone</span>\n                <input className={styles.input}\n                  type='tel'\n                  name='number'\n                  value={this.state.number}\n                  onChange={this.handleInputChange}\n                  // pattern='(\\+?( |-|\\.)?\\d{1,2}( |-|\\.)?)?(\\(?\\d{3}\\)?|\\d{3})( |-|\\.)?(\\d{3}( |-|\\.)?\\d{4})'\n                  title='Номер телефона должен состоять из 11-12 цифр и может содержать цифры, пробелы, тире, пузатые скобки и может начинаться с +'\n                  required\n                />\n              </label>\n              <button className={styles.button} type='submit'><span className={styles.content}>Add contact</span> </button>\n            </form>\n            \n          </>)\n    }\n}\n\nconst mapDispatchToProps = dispatch => ({\n  onSubmit: (name,number) => dispatch(contactsActions.addContact(name,number))\n})\n\nexport default connect(null, mapDispatchToProps)(Form);","import { connect } from 'react-redux'\nimport contactsActions from '../../redux/contacts/contacts-action'\nimport PropTypes from 'prop-types';\nimport styles from './styles.module.scss'\n\n\nconst ContactList = ({contacts, onDeleteContact }) =>{return (<>\n    <ul className={styles.list} >{contacts.map(({id, name, number}) => <li key={id} className={styles.item}>\n        <p>{name}:</p>\n        <p>{number}</p>\n        <button className={styles.button} onClick={()=> onDeleteContact(id)}>Delete</button>\n        </li>)}\n        </ul> </>);\n    } \n\n    ContactList.propTypes = {\n     onDeleteContact: PropTypes.func.isRequired\n    }\n\n    const mapStateToProps = (state) => ({\n        contacts: state.contacts.contact\n    })\n    const mapDispatchToProps = dispatch => ({\n        onDeleteContact: (id) => dispatch(contactsActions.deleteContact(id)),\n    })\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\n","import PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport contactsActions from '../../redux/contacts/contacts-action'\nimport styles from './styles.module.scss'\n\nconst Filter = ({value, onChange}) => {\n    return(<>\n    <h2 className={styles.title}>Contacts</h2>  \n     <label className={styles.label}>\n       <span className={styles.text}>Find contacts by name</span> \n        \n          <input className={styles.input} type='text' value={value} onChange={onChange} />\n        \n      </label> </>)}\n\n      // Filter.propTypes = {\n      //   value: PropTypes.string.isRequired,\n      //   onChange: PropTypes.func.isRequired\n      // }\n\n const getVisibleContact = (allContacts ,filter) => {\n    \n    const normilizeFilter = filter.toLowerCase();\n\n    return allContacts.filter(contact =>\n      contact.name.toLowerCase().includes(normilizeFilter),\n    );\n  };\n\n\n      const mapStateToProps = (state) => {\n        const {filter, contact} = state.contacts;\n        const visibleContact = getVisibleContact(contact, filter) \n       return {\n         value:  state.contacts.filter\n        } \n    }\n     const mapDispatchToProps =  dispatch => ({\n       onChange: e => dispatch(contactsActions.changeFilter(e.currentTarget.value))\n     })\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);","import { Component } from 'react';\nimport Form from './components/Form';\nimport ContactList from './components/ContactList';\nimport Filter from './components/Filter';\nimport shortid from 'shortid';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport 'modern-normalize/modern-normalize.css';\n\nclass App extends Component {\n  // state = {\n  //   contacts: [\n  //     { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n  //     { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\n  //     { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\n  //     { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\n  //   ],\n  //   filter: '',\n  // };\n\n  // addContact = ({ name, number }) => {\n  //   const contact = {\n  //     id: shortid.generate(),\n  //     name,\n  //     number,\n  //   };\n\n  //   const { contacts } = this.state;\n\n  //   contacts.find(\n  //     ({ name }) => name.toLowerCase() === contact.name.toLowerCase(),\n  //   )\n  //     ? toast.warning(`${name} is already in contacts`)\n  //     : this.setState(({ contacts }) => ({\n  //         contacts: [contact, ...contacts],\n  //       }));\n  // };\n\n  // deleteContact = id => {\n  //   this.setState(prevState => ({\n  //     contacts: prevState.contacts.filter(contact => contact.id !== id),\n  //   }));\n  // };\n\n  // changeFilter = event => {\n  //   this.setState({ filter: event.currentTarget.value });\n  // };\n\n  // getVisibleContact = () => {\n  //   const { contacts, filter } = this.state;\n\n  //   const normilizeFilter = filter.toLowerCase();\n\n  //   return contacts.filter(contact =>\n  //     contact.name.toLowerCase().includes(normilizeFilter),\n  //   );\n  // };\n  // componentDidMount() {\n  //   const contacts = localStorage.getItem('contacts');\n  //   const parsedContacts = JSON.parse(contacts);\n\n  //   if (parsedContacts) {\n  //     this.setState({ contacts: parsedContacts });\n  //   }\n  // }\n\n  // componentDidUpdate(prevProps, prevState) {\n  //   if (this.state.contacts !== prevState.contacts) {\n  //     localStorage.setItem('contacts', JSON.stringify(this.state.contacts));\n  //   }\n  // }\n\n  render() {\n    // const { filter } = this.state;\n\n    // const filteredContacts = this.getVisibleContact();\n\n    return (\n      <>\n        <Form />\n\n        <Filter />\n        <ContactList\n        // contacts={filteredContacts}\n        // onDeleteContact={this.deleteContact}\n        />\n        <ToastContainer />\n      </>\n    );\n  }\n}\n\nexport default App;\n\n// Form onSubmit={this.addContact}\n// Filter value={filter} onChange={this.changeFilter}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\nimport App from './App';\n\n//\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"styles_title__2ThQ_\",\"label\":\"styles_label__1EQMF\",\"text\":\"styles_text__H1lwr\",\"input\":\"styles_input__3cObw\"};"],"sourceRoot":""}